
require "castoro-s3-adapter"

require "logger"
require "yaml"
require "monitor"

require "castoro-client"

module Castoro::S3Adapter #:nodoc:

  # General-purpose exception class generated by s3-adapter.
  #
  class S3AdapterError < Castoro::CastoroError; end

  # s3-adapter that comprise the entire.
  #
  class Service

    DEFAULT_SETTINGS = {
      :logger             => " Proc.new { |logfile| Logger.new(logfile) } ",
      :user               => "castoro",
      :loglevel           => Logger::INFO,
      :allow_host         => "0.0.0.0",
      :port               => 8080,
      :console_allow_host => "0.0.0.0",
      :console_port       => 30100,
      :my_host            => IPSocket::getaddress(Socket::gethostname),
      :my_ports           => 30003,
      :gateways           => [ "127.0.0.1" ],
    }.freeze
  
    SETTING_TEMPLATE = "" <<
      "<% require 'logger' %>\n" <<
      {
        "default" => DEFAULT_SETTINGS.inject({}) { |h,(k,v)|
          h[k.to_s] = v
          h
        }.merge({
          "loglevel" => "<%= Logger::INFO %>",
        })
      }.to_yaml.freeze

    # initialize.
    #
    # === Args
    #
    # +logger+  :: the logger.
    # +options+ :: service options.
    #
    def initialize logger, options = {}
      @logger   = logger
      @options  = DEFAULT_SETTINGS.merge(options || {})

      client_conf = {
        "logger"   => @logger,
        "my_host"  => @options[:my_host],
        "gateways" => @options[:gateways],
      }
      @client      = Castoro::Client.new client_conf
      @dispatcher  = Dispatcher.new @logger, @client
      @console     = Console.new @logger, @options
      @http_server = HttpServer.new @logger, @dispatcher, @options

      @locker      = Monitor.new
    end

    # Start s3-adapter service.
    #
    def start
      @locker.synchronize {
        raise S3AdapterError, "s3-adapter service already started." if alive?
        @logger.info { "*** castoro-s3-adapter starting. with config\n" + @options.to_yaml }

        @client.open
        @console.start
        @http_server.start
      }
    end

    # Stop s3-adapter service.
    #
    def stop force = false
      @locker.synchronize {
        raise S3AdapterError, "s3-adapter service already stopped." unless alive?

        @client.close
        @console.stop
        @http_server.stop
        
        @logger.info { "*** castoro-s3-adapter stopped." }
      }
    end

    # Return the state of alive or not alive.
    #
    def alive?
      @locker.synchronize {
        !! (@client.opened? and @console.alive? and @http_server.alive?)
      }
    end

  end

end

